// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole  @default(CUSTOMER)
  isVerified    Boolean   @default(false)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?

  @@index([email])
}

model Address {
  id            String   @id @default(uuid())
  userId        String
  fullName      String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String   @default("India")
  phone         String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]

  @@index([userId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@index([slug])
  @@index([parentId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  comparePrice Float?
  categoryId  String
  stock       Int      @default(0)
  sku         String   @unique
  images      String[] @default([])
  sizes       String[] @default([])
  colors      String[] @default([])
  tags        String[] @default([])
  isFeatured  Boolean  @default(false)
  isActive    Boolean  @default(true)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category      @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([slug])
  @@index([categoryId])
  @@index([isFeatured])
  @@index([isActive])
}

model Review {
  id          String   @id @default(uuid())
  productId   String
  userId      String
  rating      Int
  comment     String?
  images      String[] @default([])
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size, color])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  addressId       String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  stripePaymentId String?
  subtotal        Float
  shippingCost    Float         @default(0)
  tax             Float         @default(0)
  discount        Float         @default(0)
  total           Float
  notes           String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  address         Address       @relation(fields: [addressId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  size      String?
  color     String?
  price     Float
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
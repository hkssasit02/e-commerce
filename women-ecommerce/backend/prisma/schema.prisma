// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  wishlist  WishlistItem[]

  @@map("users")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      AddressType @default(HOME)
  firstName String
  lastName  String
  street    String
  city      String
  state     String
  zipCode   String
  country   String      @default("US")
  phone     String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children Category[] @relation("CategoryTree")
  products Product[]

  @@map("categories")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Decimal   @db.Decimal(10, 2)
  originalPrice Decimal?  @db.Decimal(10, 2)
  categoryId    String
  subcategory   String?
  brand         String
  sku           String    @unique
  rating        Float     @default(0)
  reviewCount   Int       @default(0)
  inStock       Boolean   @default(true)
  stockQuantity Int       @default(0)
  tags          String[]
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  category    Category           @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  specs       ProductSpecification[]
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id            String      @id @default(cuid())
  productId     String
  name          String
  value         String
  type          VariantType
  price         Decimal?    @db.Decimal(10, 2)
  stockQuantity Int         @default(0)
  image         String?
  createdAt     DateTime    @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductSpecification {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  subtotal  Decimal  @default(0) @db.Decimal(10, 2)
  tax       Decimal  @default(0) @db.Decimal(10, 2)
  shipping  Decimal  @default(0) @db.Decimal(10, 2)
  total     Decimal  @default(0) @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id               String @id @default(cuid())
  cartId           String
  productId        String
  quantity         Int    @default(1)
  price            Decimal @db.Decimal(10, 2)
  selectedVariants Json?

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  status            OrderStatus @default(PENDING)
  shippingAddressId String
  billingAddressId  String
  paymentMethod     String
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @db.Decimal(10, 2)
  shipping          Decimal     @db.Decimal(10, 2)
  discount          Decimal     @default(0) @db.Decimal(10, 2)
  total             Decimal     @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  tracking        OrderTracking?

  @@map("orders")
}

model OrderItem {
  id               String  @id @default(cuid())
  orderId          String
  productId        String
  quantity         Int
  price            Decimal @db.Decimal(10, 2)
  total            Decimal @db.Decimal(10, 2)
  selectedVariants Json?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderTracking {
  id                String   @id @default(cuid())
  orderId           String   @unique
  carrier           String
  trackingNumber    String
  estimatedDelivery DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  order   Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  updates OrderTrackingUpdate[]

  @@map("order_tracking")
}

model OrderTrackingUpdate {
  id               String   @id @default(cuid())
  orderTrackingId  String
  status           String
  location         String
  description      String
  timestamp        DateTime @default(now())

  // Relations
  orderTracking OrderTracking @relation(fields: [orderTrackingId], references: [id], onDelete: Cascade)

  @@map("order_tracking_updates")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  title     String
  comment   String
  helpful   Int      @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  description String?
  type        CouponType
  value       Decimal    @db.Decimal(10, 2)
  minAmount   Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  usageLimit  Int?
  usedCount   Int        @default(0)
  validFrom   DateTime
  validTo     DateTime
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("coupons")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum VariantType {
  COLOR
  SIZE
  STYLE
  MATERIAL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}